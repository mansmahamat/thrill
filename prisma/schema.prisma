generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgres://qjvpsxfjaceagk:ddc25e9dc8efbafcadb89c23538b16c57cf78b2dbbee53e96c7c303ff9138d6b@ec2-54-228-125-183.eu-west-1.compute.amazonaws.com:5432/d827babainh99"
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?     @map("email_verified")
  image         String?
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @default(now()) @map("updated_at")
  accounts      Account[]
  customer      Customer?
  sessions      Session[]
  subscription  Subscription?

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refreshToken      String?  @map("refresh_token")
  access_token      String?
  token_type        String?
  expiresAt         Int?     @map("expires_at")
  scope             String?
  idToken           String?  @map("id_token")
  sessionState      String?  @map("session_state")
  oauthTokenSecret  String?  @map("oauth_token_secret")
  oauthToken        String?  @map("oauth_token")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @default(now()) @map("updated_at")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @default(now()) @map("updated_at")

  @@unique([identifier, token])
  @@map("verification_requests")
}

model Customer {
  id        String   @id @default(cuid())
  userId    String   @unique(map: "customers_user_id_unique") @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("customers")
}

model Product {
  id          String   @id @default(cuid())
  active      Boolean  @default(false)
  name        String
  description String?
  image       String?
  metadata    Json?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")
  prices      Price[]

  @@map("products")
}

model Price {
  id                String         @id @default(cuid())
  productId         String         @map("product_id")
  active            Boolean        @default(false)
  currency          String
  interval          PriceInterval?
  unitAmount        Int?           @map("unit_amount")
  interval_count    Int?
  trial_period_days Int?
  type              PriceType?
  createdAt         DateTime       @default(now()) @map("created_at")
  updatedAt         DateTime       @default(now()) @map("updated_at")
  product           Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  subscriptions     Subscription[]

  @@map("prices")
}

model Subscription {
  id                   String             @id @default(cuid())
  userId               String             @unique(map: "subscriptions_user_id_unique") @map("user_id")
  priceId              String
  status               SubscriptionStatus
  start_date           DateTime?
  ended_at             DateTime?
  trial_end            DateTime?
  trial_start          DateTime?
  cancel_at            DateTime?
  cancel_at_period_end Boolean?
  canceled_at          DateTime?
  metadata             Json?
  createdAt            DateTime           @default(now()) @map("created_at")
  updatedAt            DateTime           @default(now()) @map("updated_at")
  price                Price              @relation(fields: [priceId], references: [id])
  user                 User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

enum PriceType {
  recurring
  one_time
}

enum SubscriptionStatus {
  active
  canceled
  incomplete
  incomplete_expired
  past_due
  trialing
  unpaid
}

enum PriceInterval {
  day
  month
  week
  year
}
